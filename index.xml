<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alston&#39;s Blog on Alston&#39;s Blog</title>
    <link>https://alston.top/</link>
    <description>Recent content in Alston&#39;s Blog on Alston&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 17 Feb 2019 23:47:31 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python爬虫实战2 - 以IT桔子每周融资信息为例</title>
      <link>https://alston.top/2019/february17/</link>
      <pubDate>Sun, 17 Feb 2019 23:47:31 +0800</pubDate>
      
      <guid>https://alston.top/2019/february17/</guid>
      <description>

&lt;p&gt;爬虫分三个步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;爬取目标网页内容&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;解析网页内容，并得到需要的内容&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;保存内容&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中，第3步比较简单直观，暂时先不讲，在后文应用过程中解释。重点讲讲第1和第2步。&lt;/p&gt;

&lt;h2 id=&#34;解析网页内容&#34;&gt;解析网页内容&lt;/h2&gt;

&lt;p&gt;绝多大数网页是用HTML语言写的（你可以试试打开一个网页，右键选择“另存为”，保存到本地的就是一个HTML文件）。HTML（HyperText Markup Language），又称超文本标记语言，是一种标记语言，浏览器从服务器接收到HTML文件后按其标记内容进行解释，并呈现出不同的样式效果，从而形成丰富多样的网页。&lt;/p&gt;

&lt;p&gt;HTML文件由一个个标记块组成，比如下面是一个非常简单的HTML文件，你可以新建一个txt文件，输入以下内容，然后另存为html格式，双击打开就可以看到效果了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;网页标题&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;我的第一个标题&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;我的第一个段落。&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，大多数的内容由成对出现的标签和文本内容组成，标签用来指明该内容的含义，如段落标签为&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;、一级标题标签为&lt;code&gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;。成对的标签中间则为正式的文本内容。每对标签及其内容称为一个元素（element）。&lt;/p&gt;

&lt;p&gt;文中，第一行注明这个html文件是以html5的标准来解释的，之后&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;元素是html的内容，它又由&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;组成。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;是html头，用于包含整个html文档的属性信息，比如&lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;表示这个html文件的标题等。&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;是html的正文部分，里面是这个html文件/网页最终呈现的内容，如&lt;code&gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;是一级标题，&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;表示段落等。&lt;/p&gt;

&lt;p&gt;每个元素还可以设置属性，这也是我们解析html文档是需要使用到的。如&lt;code&gt;&amp;lt;div class=&#39;content&#39; id=&#39;div&#39;&amp;gt;XXX&amp;lt;/div&amp;gt;&lt;/code&gt;表示一个div元素，它的class属性（也叫类）是content，它的id属性是div。这两个都可以用来将这个div元素跟其他div元素区别开，其中，class属性可以共享（多个元素同个class），而id属性是惟一的。所以，如果目标内容对应的元素有id属性，则可以直接定位到该元素。&lt;/p&gt;

&lt;p&gt;爬虫第一步就是需要分析要爬的网页的结构内容，这篇文章介绍了HTML语言的基础信息，对html有个大概的了解，下一篇讲讲itjuzi每周融资信息的网页分析。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3school.com.cn/html/index.asp&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;HTML基础教程&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Python爬虫实战1 - 以IT桔子每周融资信息为例</title>
      <link>https://alston.top/2019/february05/</link>
      <pubDate>Tue, 05 Feb 2019 22:51:42 +0800</pubDate>
      
      <guid>https://alston.top/2019/february05/</guid>
      <description>&lt;p&gt;快乐时光总是过得特别快，又到了还债的时候了sign……&lt;/p&gt;

&lt;p&gt;本来说好第一篇博客献给某同志、写写怎么用python爬取IT桔子每周的融资信息的，但是由于各种这样那样的原因，一直拖到了现在，由衷地表示歉意哈哈。&lt;/p&gt;

&lt;p&gt;Anyway，这篇文章算是第一篇真正的技术博客了，是爬虫的实战应用，所以会写得比较简单，主要是帮助入门者理清爬虫的几个大方向的概念。&lt;strong&gt;代码之前运行没问题，但是IT桔子一直在改版，所以现在用不了，而且我也没有IT桔子账号密码了，所以代码还是仅供参考，需要再改改才能用。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先列个清单，列一下需要用到的相关知识点教程，初学者建议先看看这些教程。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3.7/tutorial/index.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;python基础&lt;/a&gt; &amp;ndash; 看前五章，对python有个基本认识就ok了&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3.7/tutorial/index.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;requests基础&lt;/a&gt; &amp;ndash; 也可以看&lt;a href=&#34;http://docs.python-requests.org/zh_CN/latest/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;requests官方文档&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;BeautifulSoup基础&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://seleniumhq.github.io/selenium/docs/api/py/index.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;selenium基础&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/BlueSkyyj/p/8298748.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;splinter基础&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openpyxl.readthedocs.io/en/stable/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;openpyxl基础&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;条条大路通罗马，在python里可以用不同的库完成同样的任务，这里列举的是我自己使用的一些跟爬虫有关的工具教程，读者可以根据自身情况查看对应内容，不一定跟我的一样，重要的是思想。另外，这些文档看起来很多，但是只需要看个大概就可以了，我也尽量用最简单的方法来解决问题，遇到高级的再搜索用法就ok了。&lt;/p&gt;

&lt;p&gt;最后，强烈推荐读一读&lt;a href=&#34;https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;廖雪峰的python教程&lt;/a&gt;，这是我见过最好的入门教程了，简单易懂，而且有很多应用。&lt;/p&gt;

&lt;p&gt;立个flag，尽量在一个月内写完吧23333&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>保险那些事</title>
      <link>https://alston.top/2019/february03/</link>
      <pubDate>Sun, 03 Feb 2019 22:37:27 +0800</pubDate>
      
      <guid>https://alston.top/2019/february03/</guid>
      <description>

&lt;p&gt;一直想找个时间好好梳理一下各类保险的关系，方便自己买些适合自己的保险。今天刚好有点空，就现查现记，写一下常见的一些保险，顺便给跟我差不多情况的人一点建议。&lt;/p&gt;

&lt;h2 id=&#34;返还型保险-vs-消费型保险&#34;&gt;返还型保险 vs 消费型保险&lt;/h2&gt;

&lt;p&gt;从保费是否返还角度可以将保险分为返还型保险和消费型保险：消费型保险就是传统保险，保障期过了就结束，保费归保险公司所有；返还型保险就是保障期（或者一定期限）后保费归还参保人，有些还会按一定利率计算利息给参保人；此外，还有带有理财性质的分红型保险，我没有什么需求就不考虑了。&lt;/p&gt;

&lt;p&gt;听起来返还型保险好像很值得一买是不是？Wrong！原因很简单，返还型保险太贵了！同样的保障内容，返还型保险比消费型保险贵10倍以上，虽然保费会归还，但是你用价差部分做投资甚至存银行都比返还型保险的多。&lt;/p&gt;

&lt;p&gt;就拿上次泰康的电话营销来说，提供了一个返还型的保险方案，一年要交1万多的保费，交10年，然后20年后返还所有保费的110%。我查了一下相同保额的消费型保险，一年只要200多。你每年把这个差价拿去存银行或者买货基，肯定比买返还型保险划算。即使算上每年消费型保费上涨，返还型保险也完全没有优势。&lt;/p&gt;

&lt;h2 id=&#34;社会保险-vs-商业保险&#34;&gt;社会保险 vs 商业保险&lt;/h2&gt;

&lt;p&gt;社会保险（社保）即常说的“五险一金”的“五险”，包括养老保险、基本医疗保险、失业保险、工伤保险和生育保险。涵盖了一些&lt;strong&gt;基本险种&lt;/strong&gt;的&lt;strong&gt;基本保险&lt;/strong&gt;，一般来说如果有工作的话公司会帮缴部分，自己缴的部分也直接由公司代扣，所以操作起来并不麻烦。社保的详细说明可以参考&lt;a href=&#34;https://www.zhihu.com/question/21545340/answer/116255253&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;刘思辰的回答&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;可见，光有社保远远不够，所以我们还需要买商业保险。商业保险也分很多种——寿险、意外险、综合险、财产险等等，不同情况下需要买不同的保险。这里列举一些我自己可能需要买的险种，记录一下，给自己以及差不多情况的人一个参考。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;意外险：突发情况致残或致死，按比例赔付。注意，一般猝死是不赔付的。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;重疾险：发生约定好的重大疾病时，按比例或者实际产生的医疗赔付。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;住院医疗险：达到条件住院赔付。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;寿险：身故后赔付，自杀一般不赔付，看条款。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;综合险：顾名思义，综合了几种险种的险种，也叫万能险。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我的情况：刚毕业工作不到一年，寿险暂时不需要，意外险和重疾险应该是比较重要的，住院医疗险待定。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;意外险：刚毕业，身体还不错，所以保险重要应该放在意外险，最好能附加*意外医疗险*。受益人为父母或本人。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;医疗险：大家都力推百万医疗险。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;重疾险：个人比较建议购买长期的重疾险，但是价格有点高。所以先一年一年买吧，有一定经济基础了再买长期的。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;so，目前我的理想配置是一年期意外险+一年期重疾险+百万医疗险，每年一换。具体哪个保险公司的保险产品待定。以上。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EXCEL高级排序和匹配方法</title>
      <link>https://alston.top/2019/january28/</link>
      <pubDate>Mon, 28 Jan 2019 21:27:25 +0800</pubDate>
      
      <guid>https://alston.top/2019/january28/</guid>
      <description>

&lt;p&gt;最近有一个任务涉及到比较复杂的EXCEL操作，虽然对EXCEL函数不是很熟悉，但是又想用单个公式解决，所以花了很长时间才解决。成就感十足，特此记录，免得以后忘了。&lt;/p&gt;

&lt;h2 id=&#34;任务描述&#34;&gt;任务描述&lt;/h2&gt;

&lt;p&gt;原始任务更复杂一点，出于隐私和简化目的，用一个简单的例子来代替。如图：&lt;br /&gt;
&lt;img src=&#34;https://alston.top/images/excel任务/excel任务.png&#34; alt=&#34;EXCEL任务&#34; /&gt;&lt;br /&gt;
左边每一行有惟一的学生ID、所在班别、评判标准、语数英成绩；右边每一行一样，包含了所有的学生信息。现在想根据每个学生的评判标准计算出该学生在班里的排名，比如学生ID为1的学生，计算他的语文成绩在甲班中的排名。&lt;/p&gt;

&lt;h2 id=&#34;需要用到的函数&#34;&gt;需要用到的函数&lt;/h2&gt;

&lt;h3 id=&#34;rank&#34;&gt;rank&lt;/h3&gt;

&lt;p&gt;EXCEL中排序最简单的函数就是用&lt;code&gt;rank&lt;/code&gt;函数了，用法是&lt;code&gt;=rank(num, array,order)&lt;/code&gt;，其中&lt;code&gt;num&lt;/code&gt;是要排名的数值，&lt;code&gt;array&lt;/code&gt;是要排名的序列，&lt;code&gt;order&lt;/code&gt;表示升、降序，默认为0（降序），要升序则设为1。这里需要注意是&lt;code&gt;num&lt;/code&gt;并且在&lt;code&gt;array&lt;/code&gt;中，否则结果为&lt;code&gt;#N/A&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;但是在遇到条件排序时用&lt;code&gt;rank&lt;/code&gt;就不够了，这时候可以用&lt;code&gt;sumproduct&lt;/code&gt;进行排序。&lt;/p&gt;

&lt;h3 id=&#34;sumproduct&#34;&gt;sumproduct&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;sumproduct&lt;/code&gt;，顾名思义，表示“乘积之和”，即数学定义中的“内积”，用法是&lt;code&gt;=sumproduct(array1, array2, ...)&lt;/code&gt;，参数必须是相同维度的范围，EXCEL会计算相应位置的数字乘积，然后加总得出结果。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sumproduct&lt;/code&gt;用法有很多，这里我们用它来进行排序，从而得到带有条件判断的排序（这里还用到了EXCEL对序列的计算特性，了解就好）。比如要求第1到第11个学生的语文成绩在各自班级中的排名，公式如下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;=sumproduct(($J$2:$J$21 = B2) * ($L$2:$L$2 &amp;gt; D2)) + 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;上式中的&lt;code&gt;&amp;gt;&lt;/code&gt;号可以根据需求改成&lt;code&gt;&amp;gt;=&lt;/code&gt;、&lt;code&gt;&amp;lt;=&lt;/code&gt;、&lt;code&gt;&amp;lt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;需要注意的是，很多人可能会觉得中间的乘号&lt;code&gt;*&lt;/code&gt;可以改成逗号&lt;code&gt;,&lt;/code&gt;，这是不对的。因为&lt;code&gt;($J$2:$J$21 = B2)&lt;/code&gt;和&lt;code&gt;($L$2:$L$2 &amp;gt; D2)&lt;/code&gt;是两个逻辑序列，互相独立的两个逻辑数据之间不能进行对应位置处逻辑值相乘。&lt;/p&gt;

&lt;h3 id=&#34;match&#34;&gt;match&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;match&lt;/code&gt;用于匹配指定值在指定序列中的位置，用法是&lt;code&gt;=match(num, array, type)&lt;/code&gt;，其中&lt;code&gt;num&lt;/code&gt;为要匹配的内容，&lt;code&gt;array&lt;/code&gt;为要匹配的序列，&lt;code&gt;type&lt;/code&gt;为指定的查询方式，取值为-1,0,1，定义如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;type&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1/省略&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;查找&lt;strong&gt;小于或等于&lt;/strong&gt;指定内容的&lt;strong&gt;最大值&lt;/strong&gt;，而且指定区域必须按&lt;strong&gt;升序&lt;/strong&gt;排列&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;查找&lt;strong&gt;等于&lt;/strong&gt;指定内容的&lt;strong&gt;第一个&lt;/strong&gt;数值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;查找&lt;strong&gt;大于或等于&lt;/strong&gt;指定内容的&lt;strong&gt;最小值&lt;/strong&gt;，而且指定内容必须按&lt;strong&gt;降序&lt;/strong&gt;排列&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;address&#34;&gt;address&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;address&lt;/code&gt;用于根据指定行号和列号获得单元格地址，用法是&lt;code&gt;=address(row_num, column_num, [abs_num], [a1], [sheet_text])&lt;/code&gt;。其中&lt;code&gt;abs_num&lt;/code&gt;表示返回的单元格地址格式，取值为1到4，定义如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;abs_num&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1/省略&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;绝对地址，如&amp;rdquo;$A$1&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;绝对行号，相对列标，如&amp;rdquo;A$1&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;相对行号，绝对列标，如&amp;rdquo;$A1&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;相对地址，如&amp;rdquo;A1&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;a1&lt;/code&gt;表示返回的单元格样式，取值为1或者省略时，返回A1样式（如上表举例）；取值为0时返回R1C1样式，如&lt;code&gt;R[1]C[1]&lt;/code&gt;。&lt;br /&gt;
&lt;code&gt;sheet_text&lt;/code&gt;表示表名，相当于在返回值前面加上&lt;code&gt;sheet_text!&lt;/code&gt;引用。&lt;/p&gt;

&lt;h3 id=&#34;indirect&#34;&gt;indirect&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;indirect&lt;/code&gt;返回由文本字符串指定的引用，用法比较简单，&lt;code&gt;=indirect(ref_text, a1)&lt;/code&gt;。&lt;br /&gt;
其中&lt;code&gt;ref_text&lt;/code&gt;是要引用的文本，&lt;code&gt;a1&lt;/code&gt;为单元格样式与上面定义一致。比如&lt;code&gt;indirect(&amp;quot;A1&amp;quot;)&lt;/code&gt;则返回&lt;code&gt;A1&lt;/code&gt;单元格的内容。&lt;/p&gt;

&lt;h2 id=&#34;解决问题&#34;&gt;解决问题&lt;/h2&gt;

&lt;p&gt;搞清楚需要用到的函数后，就可以着手解决问题了。我们的任务是根据每个学生的评判标准计算出该学生在班里的排名，比如学生ID为1的学生，计算他的语文成绩在甲班中的排名。以&lt;code&gt;G2&lt;/code&gt;单元格为例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先，要求在甲班中的排名，所以用&lt;code&gt;sumproduct&lt;/code&gt;：&lt;br /&gt;
&lt;code&gt;=sumproduct(($J:$J = B2)*???) + 1&lt;/code&gt;，问号是需要动态变化的，我们想要的是每个学生对应的评判标准对应的列，比如说第一个学生的评判标准是语文，则问号对应的是&lt;code&gt;($L:$L &amp;gt; D2)&lt;/code&gt;。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;获得动态的评判标准所在列的列标：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;先用&lt;code&gt;match&lt;/code&gt;得到对应的行、列号：&lt;code&gt;match(C2, $1:$1)&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;再用&lt;code&gt;address&lt;/code&gt;得到对应的行号、列标：&lt;code&gt;address(1, match(C2,$1:$1), 4&lt;/code&gt;，注意这里的1是固定的，因为我们从第一行里去匹配；4可以省略也可以换成1、2、3，对结果不造成影响。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;因为我们只需要用到列标，所以用&lt;code&gt;left&lt;/code&gt;取列标：&lt;code&gt;left(address(1,match(C2,$1:$1), 4), len(address(1,match(C2,$1:$1),4))-1)&lt;/code&gt;，如果能确定列标只有一个字母的话，&lt;code&gt;len&lt;/code&gt;那一串可以直接换成1。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;最后再用&lt;code&gt;indirect&lt;/code&gt;取对应单元格的内容：&lt;code&gt;indirect(left(address(1,match(C2,$1:$1), 4), len(address(1,match(C2,$1:$1),4))-1) &amp;amp; &amp;quot;:&amp;quot; &amp;amp; left(address(1,match(C2,$1:$1), 4), len(address(1,match(C2,$1:$1),4))-1))&lt;/code&gt;，用这一坨代替前面的三个问号就可以了。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;

&lt;p&gt;拆开后其实还是挺简单的，如果不嫌麻烦、对excel函数又比较熟悉的话，很快就可以做出来了。手工做的话，就得先按班排序，然后再把语数英三门成绩分开排序，最后再计算排名，还是比较烦琐且容易出错的。&lt;/p&gt;

&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://baijiahao.baidu.com/s?id=1571397722910063&amp;amp;wfr=spider&amp;amp;for=pc&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;SUMPRODUCT函数注意事项：乘号与逗号有区别&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.office.com/zh-cn/article/ADDRESS-%E5%87%BD%E6%95%B0-D0C26C0D-3991-446B-8DE4-AB46431D4F89&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ADDRESS函数&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.office.com/zh-cn/article/INDIRECT-%E5%87%BD%E6%95%B0-474b3a3a-8a26-4f44-b491-92b6306fa261&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;INDIRECT函数&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>中证征信第一天</title>
      <link>https://alston.top/2019/january14/</link>
      <pubDate>Mon, 14 Jan 2019 21:51:13 +0800</pubDate>
      
      <guid>https://alston.top/2019/january14/</guid>
      <description>

&lt;p&gt;结束第一份工作，今天入职中证征信（大企业部解决方案助理），也算是开始一段新的旅途了。&lt;/p&gt;

&lt;p&gt;新人新气象，今天不光是我上班的第一天，还是我把博客搭好的第一天&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。虽然很对不起某位同学，说好了第一篇博文要写篇&lt;strong&gt;IT桔子爬虫教程&lt;/strong&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;的，但是第一篇博文还是献给我的工作，也作为一个日志系统，不定期记录一下工作中的见闻和理解吧。&lt;/p&gt;

&lt;h2 id=&#34;入职&#34;&gt;入职&lt;/h2&gt;

&lt;p&gt;上午办入职手续，这个时候才想到要问五险一金的缴纳比例和基数，在此奉劝各位签约前&lt;strong&gt;一定要问清待遇的组成、五险一金的缴纳基数和缴纳比例&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;入职手续还算是比较简单，HR小姐姐人很好，领我见了几个同事，正式签约后会帮忙领一套文具和一台电脑。电脑配置花了很长时间，而且居然是旧电脑23333&lt;/p&gt;

&lt;p&gt;不能忍，更不能忍的是居然还设了管理员权限！安装个软件都得管理员登录，非常麻烦。下午的时候向管理员申请新电脑，希望能早日给到我吧。。。&lt;/p&gt;

&lt;p&gt;办完入职手续就直接去项目了。同事们都很热情，中午吃饭还带上了我。看得出来工作氛围还是比较轻松的。吃完饭下午回到项目，大家也开始进入工作。我初来乍到，也就先熟悉熟悉材料，旁听一下他们讨论了。&lt;/p&gt;

&lt;h2 id=&#34;工作记录-总结&#34;&gt;工作记录&amp;amp;总结&lt;/h2&gt;

&lt;p&gt;今天会想起写这么一篇文章，主要还是想总结一下看材料和旁听的时候发现的一些新名词吧。&lt;/p&gt;

&lt;p&gt;中证征信做的是内部信用评级——为银行、券商资管提供评级产品、风险预警、市面上难拿到的数据等。&lt;strong&gt;咨询（解决方案）这一块需要用到的知识还挺复合的，需要了解打分卡等常用的信用评级模型、统计/计量知识等，还需要了解数据库的操作（mysql之类的），模型的实现用R，当然也可以用python或者其他语言。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下面两个名词是新接触的，敞口是跟常见定义不同，清单什么的也做一下备注。&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;敞口&lt;br /&gt;&lt;/dt&gt;
&lt;dd&gt;很奇怪，一般敞口都是指存在风险的部分以及受风险影响的程度，在这里居然指的企业所在行业。当然跟行业划分又有点不一样，准确定义应该是&lt;strong&gt;综合考虑了一系列业务特征之后的企业分组&lt;/strong&gt;。&lt;br /&gt;
&lt;br /&gt;&lt;/dd&gt;
&lt;dt&gt;超长清单、长清单、短清单、入模指标&lt;br /&gt;&lt;/dt&gt;
&lt;dd&gt;清单的意思就是指标list，这里日常交流说的跟文档里的有点区别：&lt;br /&gt;&lt;/dd&gt;
&lt;dd&gt;1. 文档里是通过企业分析得到超长清单→通过数据清洗得到长清单→通过单变量分析、多变量分析、穷举建模等得到短清单→加上综合因素得出基础评级结果；&lt;br /&gt;&lt;/dd&gt;
&lt;dd&gt;2. 日常交流中使用的术语则是通过企业分析、数据清洗得到长清单→通过单变量分析、多变量分析等得到短清单→通过穷举建模、专家讨论等得到入模指标→加上综合因素得出基础评级结果。&lt;br /&gt;
&lt;br /&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;新的开始-新的期望&#34;&gt;新的开始，新的期望&lt;/h2&gt;

&lt;p&gt;结束在高沣资本的FA生涯来中证征信，也算是彻彻底底的转行了，但愿我能快点适应新工作，快点掌握工作内容吧！业余时间还得花点心思复习FRM，目标今年把FRM考下来！&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;本博客采用&lt;a href=&#34;https://gohugo.io&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt;搭建，搭建过程找时间再单独开篇博客。&lt;br /&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;我会找时间写的，I Promise!&lt;br /&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;找时间总结一下中证征信的业务介绍。&lt;br /&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>